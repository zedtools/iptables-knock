#!/usr/sbin/nft -f

flush ruleset

table inet filter {
	define lan_ipv4 = { $nfk_allow_ipv4 }
	define lan_ipv6 = { $nfk_allow_ipv6 }

	chain input {
		type filter hook input priority 0; policy drop;
		ct state invalid counter drop comment "early drop of invalid packets"
		ct state {established, related} counter accept comment "accept all connections related to connections made by us"
		iif lo accept comment "accept loopback"
		iif != lo ip daddr 127.0.0.1/8 counter drop comment "drop connections to loopback not coming from loopback"
		iif != lo ip6 daddr ::1/128 counter drop comment "drop connections to loopback not coming from loopback"
		ip  protocol icmp counter accept comment "accept all ICMP types"
		ip6 nexthdr  icmpv6 counter accept comment "accept all ICMP types"
		ip  saddr $lan_ipv4 counter accept comment "accept LAN traffic"
		ip6 saddr $lan_ipv6 counter accept comment "accept LAN traffic"
		mark 1 counter accept comment "Accepted from port knocking"
		counter comment "count dropped packets"
	}

	chain forward {
		type filter hook forward priority 0; policy drop;
		counter comment "count dropped packets"
	}

	chain output {
		type filter hook output priority 0; policy accept;
		counter comment "count accepted packets"
	}
}

table inet portknock {
	set allowed_ipv4 { type ipv4_addr . inet_proto . inet_service; flags timeout; }
	set allowed_ipv6 { type ipv6_addr . inet_proto . inet_service; flags timeout; }
	set ignored_ipv4 { type ipv4_addr; flags timeout; }
	set ignored_ipv6 { type ipv6_addr; flags timeout; }
	set knocks_ipv4 { type ipv4_addr . mark; flags timeout; }
	set knocks_ipv6 { type ipv6_addr . mark; flags timeout; }
	define valid_bit = 0x100
	define bit0 = 0x1
	define bit1 = 0x2
	define bit2 = 0x4

	# Checks if current packet matches allowed_ipv4/allowed_ipv6
	chain check_allowed {
		mark set 0 comment "Block by default"
		ip  saddr . ip protocol . th dport @allowed_ipv4 counter mark set 1 comment "IPv4 match port"
		ip6 saddr . ip6 nexthdr . th dport @allowed_ipv6 counter mark set 1 comment "IPv6 match port"
		mark 1 log prefix "NFT#knock-accepted: "
	}

	# Checks whether to ignore the current packet when checking for knocks. If so, clear the mark.
	# This does not ignore all traffic, just knocks.
	chain check_ignored {
		mark 0 return comment "Not a knock packet"
		mark > 0 ip  saddr @ignored_ipv4 mark set 0 comment "IPv4 knock to be ignored"
		mark > 0 ip6 saddr @ignored_ipv6 mark set 0 comment "IPv6 knock to be ignored"
		mark 0 log prefix "NFT#knock-ignored: "
	}

	# Decrement the value of ct mark. Valid input values for ct mark are
	# [1 .. 2^N - 1], where N is the number of bits checked, e.g. bit2 (0x04)
	# checked means the input ct mark can be up to 7.
	# This is needed until nftables supports a "decrement" operation.
	chain decrement_ct_mark {
		ct mark 0 return comment "Do not decrement below zero"
		ct mark set ct mark xor $bit0
		ct mark and $bit0 == 0 return
		ct mark set ct mark xor $bit1
		ct mark and $bit1 == 0 return
		ct mark set ct mark xor $bit2
		ct mark and $bit2 == 0 return
		# If this code is reached, the knock number is too high.
		# Check more bits above if higher values are needed.
		log prefix "NFT#decrement_ct_mark mark too high: "
		ct mark set 0 comment "invalid input"
	}

	# Record a valid knock. Also set the $valid_bit.
	chain add_knock {
		update @knocks_ipv4 { ip  saddr . mark timeout ${nfk_knock_timeout}s } comment "IPv4 add current knock"
		mark > 1 delete @knocks_ipv4 { ip  saddr . ct mark } comment "IPv4 remove previous knock"
		update @knocks_ipv6 { ip6 saddr . mark timeout ${nfk_knock_timeout}s } comment "IPv6 add current knock"
		mark > 1 delete @knocks_ipv6 { ip6 saddr . ct mark } comment "IPv6 remove previous knock"
		mark set mark or $valid_bit comment "Indicates a valid knock was received"
	}

	# Invalid knock - set mark to 0 and ignore further knocks
	chain invalid_knock {
		mark set 0 comment "Clear mark"
		update @ignored_ipv4 { ip  saddr timeout ${nfk_knock_timeout}s }
		update @ignored_ipv6 { ip6 saddr timeout ${nfk_knock_timeout}s }
		log prefix "NFT#knock-invalid: "
	}

	# Valid knock - restore original mark
	chain valid_knock {
		# clear the valid bit if set
		# "xor" has higher precedence than "or" (in nftables/src/expression.c)
		mark set (mark or $valid_bit) xor $valid_bit comment "Restore original mark"
		log prefix "NFT#knock-valid: "
	}

	# Checks if the current knock is valid. If not, mark is cleared.
	chain check_knock {
		jump check_ignored
		mark 0 return comment "Knock packet to be ignored"
		# This could use higher bits in meta mark, but using ct mark is easier as a temporary register
		ct mark set mark jump decrement_ct_mark comment "Calculate previous knock, save in ct mark"
		mark 1 jump add_knock comment "First knock is always valid"
		ip  saddr . ct mark @knocks_ipv4 jump add_knock comment "IPv4 valid subsequent knock"
		ip6 saddr . ct mark @knocks_ipv6 jump add_knock comment "IPv6 valid subsequent knock"
		ct mark set 0 comment "Clear ct mark"
		mark > 0 mark and $valid_bit == 0 jump invalid_knock
		mark and $valid_bit > 0 jump valid_knock
	}

	# Check for port knocking, and "return" the result in meta mark:
	# - meta mark = 1 if a new connection is to be accepted
	# - meta mark = 0 for all other packets (including knocks)
	# - Knocks are tracked internally
	chain input {
		type filter hook input priority -10; policy accept;

		iifname "lo" return
		ct state != new return comment "Only consider new for knocks"

		# Set mark to knock sequence number (1, 2, ...). First knock has
		# mark 1, and then increment mark for each subsequent knock.
		# rule mark set <n>
$nfk_knock_rules

		jump check_knock

		# Open access if final knock received
		mark $nfk_last_knock update @allowed_ipv4 { ip  saddr . "$nfk_allow_protocol" . $nfk_allow_port timeout ${nfk_allow_timeout}s } comment "IPv4 knock complete"
		mark $nfk_last_knock update @allowed_ipv6 { ip6 saddr . "$nfk_allow_protocol" . $nfk_allow_port timeout ${nfk_allow_timeout}s } comment "IPv6 knock complete"

		jump check_allowed
	}
}
