#!/usr/sbin/nft -f

flush ruleset

table inet filter {
	define lan_ipv4 = { $nfk_allow_ipv4 }
	define lan_ipv6 = { $nfk_allow_ipv6 }

	chain input {
		type filter hook input priority 0; policy drop;
		ct state invalid counter drop comment "early drop of invalid packets"
		ct state {established, related} counter accept comment "accept all connections related to connections made by us"
		iif lo accept comment "accept loopback"
		iif != lo ip daddr 127.0.0.1/8 counter drop comment "drop connections to loopback not coming from loopback"
		iif != lo ip6 daddr ::1/128 counter drop comment "drop connections to loopback not coming from loopback"
		ip  protocol icmp counter accept comment "accept all ICMP types"
		ip6 nexthdr  icmpv6 counter accept comment "accept all ICMP types"
		ip  saddr $lan_ipv4 counter accept comment "accept LAN traffic"
		ip6 saddr $lan_ipv6 counter accept comment "accept LAN traffic"
		mark 1 counter accept comment "Accepted from port knocking"
		counter comment "count dropped packets"
	}

	chain forward {
		type filter hook forward priority 0; policy drop;
		counter comment "count dropped packets"
	}

	chain output {
		type filter hook output priority 0; policy accept;
		counter comment "count accepted packets"
	}
}

table inet portknock {
	set allowed_ipv4 { type ipv4_addr . inet_proto . inet_service; flags timeout; }
	set allowed_ipv6 { type ipv6_addr . inet_proto . inet_service; flags timeout; }
	set blocked_ipv4 { type ipv4_addr; flags timeout; }
	set blocked_ipv6 { type ipv6_addr; flags timeout; }
	set knocks_ipv4 { type ipv4_addr . mark; flags timeout; }
	set knocks_ipv6 { type ipv6_addr . mark; flags timeout; }
	define valid_bit = 0x100

	# Checks if current packet matches allowed_ipv4/allowed_ipv6
	chain check_allowed {
		mark set 0 comment "Block by default"
		# current version of nftables does not support @th,16,16 for TCP/UDP port
		ip  saddr . ip protocol . tcp dport @allowed_ipv4 counter mark set 1 comment "IPv4 match TCP port"
		ip  saddr . ip protocol . udp dport @allowed_ipv4 counter mark set 1 comment "IPv4 match UDP port"
		ip6 saddr . ip6 nexthdr . tcp dport @allowed_ipv6 counter mark set 1 comment "IPv6 match TCP port"
		ip6 saddr . ip6 nexthdr . udp dport @allowed_ipv6 counter mark set 1 comment "IPv6 match UDP port" 
		mark 1 ct state new log prefix "NFT#knock-accepted: "
	}

	# Checks whether to ignore the current packet when checking for knocks. If so, clear the mark.
	chain check_blocked {
		mark 0 return comment "Not a knock packet"
		mark > 0 ip  saddr @blocked_ipv4 mark set 0 comment "IPv4 knock to be ignored"
		mark > 0 ip6 saddr @blocked_ipv6 mark set 0 comment "IPv6 knock to be ignored"
		mark 0 log prefix "NFT#knock-blocked: "
	}

	# Sets ct mark to (meta mark - 1)
	chain decrement_ct_mark {
		# there needs to be enough elements in map to cover all values
		ct mark set ct mark map { $nfk_decrement_map } return
		mark > 0 log prefix "NFT#decrement_ct_mark Current mark not in map: "
	}

	# Record a valid knock. Also set the $valid_bit.
	chain add_knock {
		update @knocks_ipv4 { ip  saddr . mark timeout ${nfk_knock_timeout}s } comment "IPv4 add current knock"
		# requires nftables 0.9.3 # mark > 1 delete @knocks_ipv4 { ip  saddr . ct mark } comment "IPv4 remove previous knock"
		update @knocks_ipv6 { ip6 saddr . mark timeout ${nfk_knock_timeout}s } comment "IPv6 add current knock"
		# requires nftables 0.9.3 # mark > 1 delete @knocks_ipv6 { ip6 saddr . ct mark } comment "IPv6 remove previous knock"
		mark set mark or $valid_bit comment "Indicates a valid knock was received"
	}

	# Add the packet's source address as an allowed source
	chain add_allowed {
		update @allowed_ipv4 { ip  saddr . "$nfk_allow_protocol" . $nfk_allow_port timeout ${nfk_allow_timeout}s } comment "IPv4 knock complete"
		update @allowed_ipv6 { ip6 saddr . "$nfk_allow_protocol" . $nfk_allow_port timeout ${nfk_allow_timeout}s } comment "IPv6 knock complete"
		# requires nftables 0.9.3 # mark > 0 delete @knocks_ipv4 { ip  saddr . mark } comment "IPv4 remove final knock"
		# requires nftables 0.9.3 # mark > 0 delete @knocks_ipv6 { ip6 saddr . mark } comment "IPv6 remove final knock"
	}

	# Invalid knock - set mark to 0
	chain invalid_knock {
		mark set 0 comment "Clear mark"
		update @blocked_ipv4 { ip  saddr timeout ${nfk_knock_timeout}s }
		update @blocked_ipv6 { ip6 saddr timeout ${nfk_knock_timeout}s }
		log prefix "NFT#knock-invalid: "
	}

	# Valid knock - restore original mark
	chain valid_knock {
		# clear the valid bit if set
		# "xor" has higher precedence than "or", so use two mark set commands
		mark set mark or $valid_bit mark set mark xor $valid_bit comment "Restore original mark"
		log prefix "NFT#knock-valid: "
	}

	# Checks if the current knock is valid. If not, mark is cleared.
	chain check_knock {
		jump check_blocked
		mark 0 return comment "Knock packet to be ignored"
		# current version of nftables does not support mark set mark << N so need to use ct mark temporarily
		ct mark set mark jump decrement_ct_mark comment "Calculate previous knock, save in ct mark"
		mark 1 jump add_knock comment "First knock is always valid"
		ip  saddr . ct mark @knocks_ipv4 jump add_knock comment "IPv4 valid subsequent knock"
		ip6 saddr . ct mark @knocks_ipv6 jump add_knock comment "IPv6 valid subsequent knock"
		ct mark set 0 comment "Clear ct mark"
		mark > 0 mark and $valid_bit == 0 jump invalid_knock
		mark and $valid_bit > 0 jump valid_knock
	}

	chain input {
		type filter hook input priority -10; policy accept;

		iifname "lo" return

		# Set mark to knock sequence number (1, 2, ...). First knock has
		# mark 1, and then increment mark for each subsequent knock.
		# rule mark set <n>
$nfk_knock_rules

		jump check_knock

		# Open access if final knock received
		mark $nfk_last_knock update @allowed_ipv4 { ip  saddr . "$nfk_allow_protocol" . $nfk_allow_port timeout ${nfk_allow_timeout}s } comment "IPv4 knock complete"
		mark $nfk_last_knock update @allowed_ipv6 { ip6 saddr . "$nfk_allow_protocol" . $nfk_allow_port timeout ${nfk_allow_timeout}s } comment "IPv6 knock complete"

		jump check_allowed
	}
}
